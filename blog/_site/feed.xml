<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-07T11:25:58-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Simply Complicated</title><author><name>Aidan Keighron</name><email>aidankeighron@gmail.com</email></author><entry><title type="html">File Calculator</title><link href="http://localhost:4000/posts/file-calculator/" rel="alternate" type="text/html" title="File Calculator" /><published>2022-12-07T06:00:00-06:00</published><updated>2022-12-07T06:00:00-06:00</updated><id>http://localhost:4000/posts/file-calculator</id><content type="html" xml:base="http://localhost:4000/posts/file-calculator/"><![CDATA[<h1 id="file-calculator">File Calculator</h1>
<p>I wanted to create a non-conventional calculator so I decided to create one that takes up no space, but how does one create a zero-byte calculator?</p>

<p>What’s wrong with:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>It takes up space. Nearly every programming language except for a few esoteric languages has a file size that is greater than zero bytes. So how is this possible? First, let me clarify, there will be a program written in java (for no particular reason) to generate this calculator and perform operations with it. The actual calculations will still be done with zero bytes but there will be a program to help us get there.</p>

<p>Folders and empty files “technically” take up zero space (They do take up space on your filesystem’s metadata files but according to their properties they take up zero bytes). Now let’s add some restrictions so we are not generating millions of folders and files.</p>

<ul>
  <li>Numbers must be between 0 and 1000</li>
  <li>The only operation available is addition</li>
</ul>

<p>Here is a look at the files system:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">├──</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">├──</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">└──</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="err">│</span><span class="w">       </span><span class="err">└──</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></code></pre></div></div>

<p>Using a structure like this we can find the result by finding the name of the file in the /num1/num2/ directory. The first dimension of folders is the rows and the second dimension of files is the columns:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get answer</span>
<span class="nc">File</span> <span class="n">numberFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">firstNumber</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">secondNumber</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Your answer is: "</span> <span class="o">+</span> <span class="n">numberFile</span><span class="o">.</span><span class="na">list</span><span class="o">()[</span><span class="mi">0</span><span class="o">]);</span>
</code></pre></div></div>

<p>But before we get the answer we need to generate the files. To make it faster we will multithreading. First, let’s take a look at the <code class="language-plaintext highlighter-rouge">CalcThread</code> class:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CalcThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
    
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">CalcThread</span><span class="o">(</span><span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startRow</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">endRow</span> <span class="o">=</span> <span class="n">endRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">numColumns</span> <span class="o">=</span> <span class="n">numColumns</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">endRow</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span><span class="o">).</span><span class="na">mkdir</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numColumns</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span><span class="o">).</span><span class="na">mkdir</span><span class="o">();</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)).</span><span class="na">createNewFile</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>This thread’s goal is to generate a 2d matrix of folders with columns from <code class="language-plaintext highlighter-rouge">startRow</code> to <code class="language-plaintext highlighter-rouge">endRow</code> and a row length of <code class="language-plaintext highlighter-rouge">numColumns</code>. A file is created with a name that is the sum of that column and row.</p>

<p>Next, let’s take a look at the <code class="language-plaintext highlighter-rouge">calculateNumbers()</code> method which will generate the directory structure.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">calculateNumbers</span><span class="o">(</span><span class="kt">int</span> <span class="n">numThreads</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>        
    <span class="kt">int</span> <span class="n">rowPerThread</span> <span class="o">=</span> <span class="n">maxNum</span><span class="o">/</span><span class="n">numThreads</span><span class="o">;</span>
    <span class="nc">CalcThread</span><span class="o">[]</span> <span class="n">threads</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CalcThread</span><span class="o">[</span><span class="n">numThreads</span><span class="o">];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CalcThread</span><span class="o">((</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)),</span> <span class="n">maxNum</span><span class="o">);</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CalcThread</span><span class="o">(</span><span class="n">maxNum</span> <span class="o">-</span> <span class="n">rowPerThread</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">);</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">maxNum</code> is the total range calculatetable numbers (e.g., You can add together numbers from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">maxNum-1</code>)</li>
</ul>

<p>Here we figure out how many rows to give each thread writing a special case for the last thread so we don’t miss any numbers due to rounding. If we run this program for numbers between 0 and 1000, it takes 1,002,000 folders, 1,001,000 files, a boot-up time of 400 seconds, and a shutdown time of 460 to generate everything using 250 threads.</p>

<p>Optionally you can delete everything when you are done. You could just right-click on the folder and press delete but let’s do it with code.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">deleteNumbers</span><span class="o">(</span><span class="kt">int</span> <span class="n">numThreads</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">rowPerThread</span> <span class="o">=</span> <span class="n">maxNum</span><span class="o">/</span><span class="n">numThreads</span><span class="o">;</span>
    <span class="nc">DeleteThread</span><span class="o">[]</span> <span class="n">threads</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeleteThread</span><span class="o">[</span><span class="n">numThreads</span><span class="o">];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeleteThread</span><span class="o">((</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)),</span> <span class="n">maxNum</span><span class="o">);</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeleteThread</span><span class="o">(</span><span class="n">maxNum</span> <span class="o">-</span> <span class="n">rowPerThread</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">);</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">numberFolder</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DeleteThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
    
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">DeleteThread</span><span class="o">(</span><span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startRow</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">endRow</span> <span class="o">=</span> <span class="n">endRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">numColumns</span> <span class="o">=</span> <span class="n">numColumns</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">endRow</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numColumns</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">)).</span><span class="na">delete</span><span class="o">();</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span><span class="o">).</span><span class="na">delete</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers\\"</span> <span class="o">+</span> <span class="n">i</span><span class="o">).</span><span class="na">delete</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>We need to delete everything recursively because java only allows us to delete empty folders. Essentially we do the same thing we did with creating the files and folders but in reverse.</p>

<p>The full code is on GitHub <a href="https://github.com/SwervyK/Calculator">Calculator</a></p>]]></content><author><name>Aidan Keighron</name><email>aidankeighron@gmail.com</email></author><category term="java" /><summary type="html"><![CDATA[File Calculator I wanted to create a non-conventional calculator so I decided to create one that takes up no space, but how does one create a zero-byte calculator?]]></summary></entry></feed>