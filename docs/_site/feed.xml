<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-12T13:39:42-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Simply Complicated</title><author><name>Aidan Keighron</name><email>aidankeighron@gmail.com</email></author><entry><title type="html">File Calculator</title><link href="http://localhost:4000/posts/file-calculator/" rel="alternate" type="text/html" title="File Calculator" /><published>2022-12-12T06:00:00-06:00</published><updated>2022-12-12T06:00:00-06:00</updated><id>http://localhost:4000/posts/file-calculator</id><content type="html" xml:base="http://localhost:4000/posts/file-calculator/"><![CDATA[<h1 id="file-calculator">File Calculator</h1>
<p>I decided I wanted to create a non-conventional calculator. So, I created one that takes up no space (taking up zero bytes), but how does one create a zero-byte calculator?</p>

<p>Why can’t we just do this?:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Because it takes up space. For this project, we are trying to limit the space of whatever does the calculations i.e., <code class="language-plaintext highlighter-rouge">return x1 + x2</code>. Nearly every programming language except for a few esoteric languages has a file size that is greater than zero bytes. So how is creating a zero-byte calculator possible? First, let me clarify a few things. For this project, there will be a program (written in java for no particular reason) to generate this calculator and perform operations with it. The actual calculations will still be done with zero bytes but we will be using a program to interact with it.</p>

<p>Folders and empty files “technically” take up zero space (They do take up space in your filesystem’s metadata files but we are talking about their size according to their properties). Because of that, we will be using both folders and empty files to create the calculator. As much as I would love to make a graphing calculator out of folders and files, I don’t want my computer to spend the rest of its life generating them. So let’s add some restrictions so we are not generating millions of folders and files.</p>

<ul>
  <li>Calculable numbers are from 0 and 1000</li>
  <li>The only operation available is addition</li>
</ul>

<h2 id="file-system">File System</h2>

<p>Here is a look at the files system:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">Calculator/</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">├──</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">└──</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="err">│</span><span class="w">       </span><span class="err">└──</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="err">(file)</span><span class="w">
</span><span class="err">├──</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span></code></pre></div></div>

<p>Using a structure like this we store the result of the previous two directories as the name of a file. To find the result of a calculation e.g., to find the solution to 2 + 1 you find the name of the file in the /2/1/ directory (the file would be /2/1/3). The first dimension of folders is the rows and the second dimension of folders is the columns:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get answer</span>
<span class="nc">File</span> <span class="n">numberFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">firstNumber</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">secondNumber</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Your answer is: "</span> <span class="o">+</span> <span class="n">numberFile</span><span class="o">.</span><span class="na">list</span><span class="o">()[</span><span class="mi">0</span><span class="o">]);</span>
</code></pre></div></div>

<h2 id="generation">Generation</h2>

<p>But before we get the answer we need to generate the files. To make it faster we will <a href="https://www.geeksforgeeks.org/multithreading-in-java/" target="\_blank">multithread</a>. Without multithreading, it took me 30 minutes to generate all the files and folders so I think it is necessary. Now, let’s take a look at the <code class="language-plaintext highlighter-rouge">CalcThread</code> class which is the thread that will create parts of the matrix:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CalcThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
   
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">;</span>
   
    <span class="kd">public</span> <span class="nf">CalcThread</span><span class="o">(</span><span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startRow</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">endRow</span> <span class="o">=</span> <span class="n">endRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">numColumns</span> <span class="o">=</span> <span class="n">numColumns</span><span class="o">;</span>
    <span class="o">}</span>
   
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">endRow</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span><span class="o">).</span><span class="na">mkdir</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numColumns</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span><span class="o">).</span><span class="na">mkdir</span><span class="o">();</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)).</span><span class="na">createNewFile</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>This thread’s goal is to generate a 2d matrix of folders with rows from <code class="language-plaintext highlighter-rouge">startRow</code> to <code class="language-plaintext highlighter-rouge">endRow</code> and a column length of <code class="language-plaintext highlighter-rouge">numColumns</code>. A file is created at each index with a name that is the sum of the column and row. For example, if the row is 3 and the column is 2 the filename would be 5.</p>

<p>Next, let’s take a look at the <code class="language-plaintext highlighter-rouge">calculateNumbers()</code> method which will allocate rows to each thread.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">calculateNumbers</span><span class="o">(</span><span class="kt">int</span> <span class="n">numThreads</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>        
    <span class="kt">int</span> <span class="n">rowPerThread</span> <span class="o">=</span> <span class="n">maxNum</span><span class="o">/</span><span class="n">numThreads</span><span class="o">;</span>
    <span class="nc">CalcThread</span><span class="o">[]</span> <span class="n">threads</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CalcThread</span><span class="o">[</span><span class="n">numThreads</span><span class="o">];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CalcThread</span><span class="o">((</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)),</span> <span class="n">maxNum</span><span class="o">);</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CalcThread</span><span class="o">(</span><span class="n">maxNum</span> <span class="o">-</span> <span class="n">rowPerThread</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">);</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">maxNum</code> is the total range of calculable numbers (e.g., You can add together numbers from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">maxNum-1</code>)</li>
</ul>

<p>Here we figure out how many rows to give each thread. We are writing a special case for the last thread so we don’t miss any numbers due to rounding. If we run this program for numbers between 0 and 1000, it takes 1,003,002 folders, 1,002,001 files, a boot-up time of 6.5 minutes, and a shutdown time of 7.5 minutes to generate everything using 250 threads. Going from 30 minutes to 6.5 minutes shows you just how powerful multithreading is, the fact that we are using 250 of them also helps. We did overshoot our goal of not generating millions of files but we got pretty close.</p>

<h2 id="deletion">Deletion</h2>

<p>Optionally you can delete everything when you are done by just right-clicking on the folder and pressing delete. But, let’s do it with code which is faster when we multithread.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">deleteNumbers</span><span class="o">(</span><span class="kt">int</span> <span class="n">numThreads</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">rowPerThread</span> <span class="o">=</span> <span class="n">maxNum</span><span class="o">/</span><span class="n">numThreads</span><span class="o">;</span>
    <span class="nc">DeleteThread</span><span class="o">[]</span> <span class="n">threads</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeleteThread</span><span class="o">[</span><span class="n">numThreads</span><span class="o">];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeleteThread</span><span class="o">((</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="n">i</span><span class="o">),</span> <span class="o">(</span><span class="n">rowPerThread</span> <span class="o">*</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)),</span> <span class="n">maxNum</span><span class="o">);</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeleteThread</span><span class="o">(</span><span class="n">maxNum</span> <span class="o">-</span> <span class="n">rowPerThread</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">,</span> <span class="n">maxNum</span><span class="o">);</span>
    <span class="n">threads</span><span class="o">[</span><span class="n">threads</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numThreads</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">numberFolder</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
<span class="o">}</span>
 
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DeleteThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
   
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">;</span>
   
    <span class="kd">public</span> <span class="nf">DeleteThread</span><span class="o">(</span><span class="kt">int</span> <span class="n">startRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numColumns</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startRow</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">endRow</span> <span class="o">=</span> <span class="n">endRow</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">numColumns</span> <span class="o">=</span> <span class="n">numColumns</span><span class="o">;</span>
    <span class="o">}</span>
   
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">endRow</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numColumns</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">)).</span><span class="na">delete</span><span class="o">();</span>
                    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span><span class="o">).</span><span class="na">delete</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers\\"</span> <span class="o">+</span> <span class="n">i</span><span class="o">).</span><span class="na">delete</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>When deleting files with code, we need to delete everything recursively because java only allows us to delete empty folders. Essentially we are doing the same thing we did when creating the files and folders but in reverse.</p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>This project was not meant as a serious attempt at creating an efficient calculator. In reality, this calculator takes up more space than a conventional calculator and takes longer to find the answer. <a href="https://www.geeksforgeeks.org/analysis-algorithms-big-o-analysis/" target="\_blank">Analyzing</a> it, we find it has a size complexity of \(O(2n^2 + n)\) (simplifying down to \(O(n^2)\)) and I don’t even want to spend the time calculating time complexity. Altogether it was a fun project and I enjoyed creating it and I hope you enjoyed reading about it.</p>

<h2 id="on-complexity">\(O(n)\) complexity</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span><span class="o">).</span><span class="na">mkdir</span><span class="o">();</span> <span class="c1">// 1st Dimension of folders (size)</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numColumns</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span><span class="o">).</span><span class="na">mkdir</span><span class="o">();</span> <span class="c1">// 2nd Dimension of folders (size * numColumns)</span>
        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"Numbers"</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">"\\"</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)).</span><span class="na">createNewFile</span><span class="o">();</span> <span class="c1">// Files (size * numColumns)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>I will talk a bit about how I found the \(O(n)\) size complexity for this project. N is the size of calculable numbers i.e., calculable numbers from 0 to 1000 would have an N of 1001. The \(O(n)\) for the files is simply just <code class="language-plaintext highlighter-rouge">size * numColumns</code> as seen above and the same is true for the 2nd dimension of files with the 1st dimension being just <code class="language-plaintext highlighter-rouge">size</code>.</p>

<p>If you will like to check it out, the full code is on GitHub: <a href="https://github.com/SwervyK/Calculator" target="\_blank">Calculator</a></p>]]></content><author><name>Aidan Keighron</name><email>aidankeighron@gmail.com</email></author><category term="java" /><summary type="html"><![CDATA[File Calculator I decided I wanted to create a non-conventional calculator. So, I created one that takes up no space (taking up zero bytes), but how does one create a zero-byte calculator? Why can’t we just do this?:]]></summary></entry></feed>